include { INPUT_CHECK }                 from './../modules/input_check'
include { FASTP }                       from './../modules/fastp/main'
include { MULTIQC }                     from './../modules/multiqc/main'
include { CUSTOM_DUMPSOFTWAREVERSIONS } from './../modules/custom/dumpsoftwareversions'
include { PORECHOP }                    from './../modules/porechop'
include { SRST2_SRST2 }                 from './../modules/srst2/srst2'
include { PBIPA }                       from './../modules/pbipa'
include { SHOVILL }                     from './../modules/shovill'
include { UNICYCLER }                   from './../modules/unicycler' 

tools = params.tools ? params.tools.split(',').collect { tool -> clean_tool(tool) } : []

ch_versions     = Channel.from([])
multiqc_files   = Channel.from([])

workflow GABI {
    take:
    samplesheet

    main:

    // TODO: Make sure this module is compatible with the samplesheet format you create
    INPUT_CHECK(samplesheet)

    // Divide reads up into their sequencing technologies 
    INPUT_CHECK.out.reads.branch { meta,reads
        illumina:       meta.platform == "ILLUMINA"
        ont:            meta.platform == "NANOPORE"
        pacbio:         meta.platform == "PACBIO"
    }.set { ch_reads }

    // Short read trimming and QC
    FASTP(
        ch_reads.illumina
    )
    ch_versions = ch_versions.mix(FASTP.out.versions)
    multiqc_files = multiqc_files.mix(FASTP.out.json)

    // Nanopore read QC
    PORECHOP(
        ch_reads.ont
    )
    ch_versions = ch_versions.mix(PORECHOP.out.versions)

    // Joining read channels by samples and sequencing platform(s)
    ch_short_reads_for_cross                    = FASTP.out.reads.map { m,r -> [m.sample_id,m,r]}
    ch_ont_reads_for_cross                      = PORECHOP.out.reads.map { m,r -> [m.sample_id,m,r]}

    ch_short_reads_cross_grouped                = ch_short_reads_for_cross.groupTuple()
    ch_ont_reads_cross_grouped                  = ch_ont_reads_for_cross.groupTuple()

    ch_reads_cross_grouped_joined               = ch_short_reads_cross_grouped.join(ch_ont_reads_cross_grouped, remainder: true)
    ch_reads_cross_grouped_joined_filtered      = ch_reads_cross_grouped_joined.filter{ it -> !(it.last()) }
    ch_short_reads_only                         = ch_reads_cross_grouped_joined_filtered.transpose().map{ it -> [it[1], it[2] }.groupTuple()

    ch_ont_reads_cross_grouped_joined           = ch_ont_reads_cross_grouped.join(ch_short_reads_cross_grouped, remainder: true)
    ch_ont_reads_cross_grouped_joined_filtered  = ch_ont_reads_cross_grouped_joined.filter{ it -> !(it.last()) }
    ch_ont_reads_only                           = ch_ont_reads_cross_grouped_joined_filtered.transpose().map{ it -> [it[1], it[2] }.groupTuple()
    
    // groupings that have data for both types
    ch_hybrid_reads                             = ch_reads_cross_grouped_joined.filter{ it -> (it.last()) }
    
    ch_short_reads_only.view()
    ch_ont_reads_only.view()
    ch_hybrid_reads.view()

    // HYBRID_ASSEMBY
    if ('unicycler' in tools) {
        UNICYCLER(
            ch_hybrid_reads
        )
        ch_versions = ch_versions.mix(UNICYCLER.out.versions)
    }
    
    // SHORT_READ_ASSEMBLY
    if ('shovill' in tools) {
        SHOVILL(
            ch_short_reads_only
        )
        ch_versions = ch_versions.mix(SHOVILL.out.versions)
    }

    //Pacbio assembly
    if ('ipa') {
        PBIPA(
            ch_reads.pacbio
        )
        ch_versions = ch_versions.mix(PBIPA.out.versions)
    }

    // SPECIES IDENTIFICATION

    // BUSCO

    // QUAST

    // SRST2
    if ('srst2' in tools) {
        SRST2_SRST2(
            ch_short_reads_only
        )
    }

    // PUNKPOP

    // CGMLST

    // MLTST

    CUSTOM_DUMPSOFTWAREVERSIONS(
        ch_versions.unique().collectFile(name: 'collated_versions.yml')
    )

    multiqc_files = multiqc_files.mix(CUSTOM_DUMPSOFTWAREVERSIONS.out.mqc_yml)

    MULTIQC(
        multiqc_files.collect()
    )

    emit:
    qc = MULTIQC.out.html
}

def clean_tool(String tool) {
    return tool.trim().toLowerCase().replaceAll('-', '').replaceAll('_', '')
}