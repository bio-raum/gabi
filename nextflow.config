params {

    input                   = null
    outdir                  = "results"

    skip_failed             = false
    max_contigs             = 150

    reference_version       = "1.0"

    random_seed             = null

    prokka_proteins         = null
    prokka_prodigal         = null

    unicycler               = false
    shovill_assembler       = "spades"
    min_contig_len          = 300

    amrfinderplus_db        = null
    arg_amrfinderplus_identmin              = -1
    arg_amrfinderplus_coveragemin           = 0.5
    arg_amrfinderplus_translationtable      = 11
    arg_amrfinderplus_plus                  = false
    arg_amrfinderplus_name                  = false

    arg_hamronization_summarizeformat = 'tsv'

    arg_abricate_minid      = 80
    arg_abricate_mincov     = 80
    abricate_dbs            = ['vfdb']

    busco_lineage           = "bacteria"
    busco_db_path           = null
    
    confindr_db             = null

    remove_host             = false

    fast_ref                = false

    max_coverage            = "100x"
    
    skip_porechop           = true

    onthq                   = false
    ont_min_length          = 5000
    ont_min_q               = 10
    ont_min_reads           = 1000
    medaka_model            = null
    homopolish_model        = "R10"
    skip_homopolish         = false
    
    reference_base          = null

    build_references        = false

    logo                    = "${baseDir}/assets/pipelinelogo.png"
    run_name                = null

    skip_report             = false
    skip_annotation         = false
    skip_optional           = false
    skip_mlst               = false
    skip_amr                = false
    skip_circos             = false
    skip_serotyping         = false
    skip_variants           = false
    
    skip_multiqc            = false

    multiqc_config          = "${baseDir}/conf/multiqc_config.yaml"
    multiqc_logo            = "${baseDir}/assets/pipelinelogo.png"

    template                = "${baseDir}/assets/gabi_template.html"
    report_refs             = "${baseDir}/assets/AQUAMIS_thresholds.json"

    publish_dir_mode        = "copy"

    custom_config_base      = "https://raw.githubusercontent.com/bio-raum/nf-configs/main"

}

manifest {
    name = "bio-raum/gabi"
    version = "1.2.1"
    description = "GABI Pipeline for assembly and profiling of bacterial isolates"
    author = "Marc Hoeppner"
    homePage = "https://github.com/bio-raum/gabi"
    nextflowVersion = "24.10.5"
}

plugins {
  id 'nf-schema@2.4.0'
}

validation {
    help {
        enabled = true
    }
    summary {
        hideParams = [ "references" ]
    }
}

process {
    shell = ['/bin/bash', '-euo', 'pipefail']
    resourceLimits = [ cpus: 8, memory: 32.GB, time: 72.h ]
}

timeline {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_timeline.html"
}
report {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_report.html"
}
trace {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_trace.txt"
}
dag {
    overwrite = true
    enabled = true
    file = "${params.outdir}/pipeline_info/pipeline_dag.svg"
}

// Module-specific configuration options
includeConfig 'conf/modules.config'
includeConfig 'conf/modules/assembly.config'
includeConfig 'conf/modules/mlst.config'
includeConfig 'conf/modules/read_qc.config'
includeConfig 'conf/modules/assembly_qc.config'
includeConfig 'conf/modules/serotyping.config'
includeConfig 'conf/modules/amr.config'
includeConfig 'conf/modules/installation.config'

// Load centrally stored profiles
includeConfig !System.getenv('NXF_OFFLINE') && params.custom_config_base ? "${params.custom_config_base}/custom.config" : "/dev/null"

// load the default config files
includeConfig 'conf/base.config'
includeConfig 'conf/resources.config'

profiles {
    
    docker { 
        docker.enabled = true 
        singularity.enabled = false
        podman.enabled = false
        conda.enabled = false
        apptainer.enabled = false
    }
    singularity {
        docker.enabled = false
        podman.enabled = false
        conda.enabled = false
        apptainer.enabled = false
        singularity.enabled = true
    }
    podman {
        docker.enabled = false
        singularity.enabled = false
        conda.enabled = false
        apptainer.enabled = false
        podman.enabled = true
    }
    conda {
        docker.enabled = false
        podman.enabled = false
        singularity.enabled = false
        apptainer.enabled = false
        conda.enabled = true
    }
    apptainer {
        apptainer.enabled = true
        docker.enabled = false
        podman.enabled = false
        singularity.enabled = false
        conda.enabled = false
    }
    test {
        includeConfig 'conf/test.config'
    }
    test_ont {
        includeConfig 'conf/test_ont.config'
    }
}
