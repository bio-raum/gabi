process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        enabled: true,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]
    withName: 'MULTIQC|GABI_REPORT' {
        publishDir = [
            path: { "${params.outdir}/reports" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIQC_ILLUMINA {
        ext.prefix = "multiqc_illumina"
        publishDir = [
            path: { "${params.outdir}/reports/Illumina" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIQC_NANOPORE {
        ext.prefix = "multiqc_nanopore"
        publishDir = [
            path: { "${params.outdir}/reports/Nanopore" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MULTIQC_PACBIO {
        ext.prefix = "multiqc_pacbio"
        publishDir = [
            path: { "${params.outdir}/reports/Pacbio" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'MASH_DIST|MASH_SKETCH' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/mash" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    // The sketch and the DB must have the same seed; here: 0
    withName: MASH_SKETCH {
        ext.args = "-S 0"
    }
    withName: GABI_SUMMARY {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: QUAST {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly/quast" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MUMMER2CIRCOS {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/plots" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SHOVILL {
	ext.args = "--assembler ${params.shovill_assembler} --minlen ${params.shovill_contig_minlen}"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly/shovill" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PROKKA {
        ext.args = "--force"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/annotation/prokka" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DOWNLOAD_GENOME {
        publishDir = [
            path: { "${params.outdir}/refgenomes" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BUSCO_BUSCO {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly/busco" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: KRAKEN2_KRAKEN2 {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/taxonomy/kraken2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'SAMTOOLS_INDEX|SAMTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/bam" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: SAMTOOLS_MERGE {
       publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/bam" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: 'BWAMEM2_MEM|BWAMEM2_INDEX' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/bwamem" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MOSDEPTH {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/mosdepth" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }

    withName: 'CONFINDR' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CONFINDR2MQC|CONFINDR2MQC_SUMMARY' {
        publishDir = [
            path: { "${params.outdir}/qc" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CONFINDR2JSON' {
       publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/confindr" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: 'ECTYPER|SEQSERO2|LISSERO|SISTR|STECFINDER' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/serotype/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'STECFINDER' {
        ext.args = "--hits"
    }
    withName: 'SNIPPY_RUN' {
        ext.prefix = "snippy"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/variants/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'TABIX_TABIX|BCFTOOLS_STATS' {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/variants/${meta.sample_id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: FASTQC {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc/fastqc" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: AMRFINDERPLUS_RUN {
        ext.args = [
            "--ident_min ${params.arg_amrfinderplus_identmin}",
            "--coverage_min ${params.arg_amrfinderplus_coveragemin}",
            "--translation_table ${params.arg_amrfinderplus_translationtable}",
            params.arg_amrfinderplus_plus ? '--plus' : '',
            params.arg_amrfinderplus_name ? '--name ${meta.sample_id}' : ''
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/amr/amrfinderplus" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HAMRONIZATION_AMRFINDERPLUS {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/amr/amrfinderplus" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.sample_id}.amrfinderplus" }
    }
    withName: ABRICATE_RUN {
        ext.args =  [
            "--db ${params.arg_abricate_db}",
            "--minid ${params.arg_abricate_minid}",
            "--mincov ${params.arg_abricate_mincov}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/amr/abricate" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: HAMRONIZATION_ABRICATE {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/amr/abricate" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
        ext.prefix = { "${meta.sample_id}.abricate" }
    }
    withName: HAMRONIZATION_SUMMARIZE {
        publishDir = [
            path: { "${params.outdir}/AMR" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MINIMAP2_ALIGN {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/minimap2/" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PORECHOP_ABI {
        ext.args = "--abi"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc/porechop" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CHOPPER {
        ext.args2 = [
            "-l ${params.ont_min_length}",
            params.ont_min_q ? "-q ${params.ont_min_q}" : ""
        ].join(' ').trim()
         publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/chopper" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    
    }
    withName: NANOPLOT {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc/nanoplot/${meta.library_id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CAT_FASTQ {
        publishDir = [
            path: { "${params.outdir}/cat" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: BIOBLOOM_CATEGORIZER {
        ext.args = "-g -n --fq"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/biobloom" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: RASUSA {
        ext.args = [
            "--genome-size ${params.genome_size}",
            "--coverage ${params.max_coverage}"
        ].join(' ').trim()
        publishDir = [
            path: { "${params.outdir}/rasusa" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: FASTP {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/qc/fastp" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.contains('*.json') ? filename : null }
        ]
    }
    withName: CUSTOM_DUMPSOFTWAREVERSIONS {
        publishDir = [
            path: { "${params.outdir}/custom" },
            mode: params.publish_dir_mode,
            enabled: false
        ]
    }
    withName: DRAGONFLYE {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly/dragonflye" },
            mode: params.publish_dir_mode,
            enabled: true
        ]
    }
    withName: RENAME_SHOVILL_CTG {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: MOBSUITE_RECON {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/plasmids" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: FLYE {
        ext.args = "--plasmids --pacbio-hifi"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/assembly/flye/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: AMRFINDERPLUS_INSTALL {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: BUSCO_INSTALL {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/busco" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: KRAKEN2_DOWNLOAD {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/kraken2" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: DOWNLOAD_SOURMASH_DB {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/sourmashdb" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CHEWBBACA_DOWNLOADSCHEMA {
        ext.args = "--latest"
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/chewbbaca" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: CONFINDR_INSTALL {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'PYMLST_CLAMLST_INSTALL|PYMLST_WGMLST_INSTALL' {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/mlst" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PYMLST_WGMLST_DISTANCE {
        publishDir = [
            path: { "${params.outdir}/cgMLST/pymlst" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: PYMLST_WGMLST_ADD {
        publishDir = [
            path: { "${params.outdir}/cgMLST/pymlst" },
            mode: params.publish_dir_mode,
            enabled: false,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: MLST {
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/mlst" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CHEWBBACA_ALLELECALLEVALUATOR' {
        
        publishDir = [
            path: { "${params.outdir}/cgMLST/chewbbaca/${meta.sample_id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CHEWBBACA_JOINPROFILES' {
        publishDir = [
            path: { "${params.outdir}/cgMLST/chewbbaca/samples/${meta.sample_id}/joinprofiles" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: 'CHEWBBACA_ALLELECALL_SINGLE' {
        ext.args = "--no-inferred"
        publishDir = [
            path: { "${params.outdir}/samples/${meta.sample_id}/chewbbaca" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
    withName: GUNZIP_MASHDB {
        publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/mashdb/" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
	    ]   
    }
    withName: BIOBLOOM_MAKER {
       publishDir = [
            path: { "${params.reference_base}/gabi/${params.reference_version}/biobloom" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ] 
    }
    withName: 'CHEWBBACA_ALLELECALL' {
        ext.args = "--no-inferred"
        publishDir = [
            path: { "${params.outdir}/cgMLST/chewbbaca/${meta.sample_id}" },
            mode: params.publish_dir_mode,
            enabled: true,
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
        ]
    }
}
